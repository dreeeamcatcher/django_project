#!/bin/sh
#
# Copyright 2013-2015. Quantum Corporation. All Rights Reserved.
# StorNext is either a trademark or registered trademark of
# Quantum Corporation in the US and/or other countries.
#
prog=$0

ECHO=echo

os=`uname`
host=`uname -n`

#
# On Mac OS X, make sure the user is running as the superuser (usually
# with sudo(1)).
#
if [ x${os} = xDarwin ]; then
	euid=`id -u`
	if [ "${euid}" != "0" ]; then
		echo "Insufficient administrative privileges."
		exit 1
	fi
fi

if [ -z "${TMPDIR}" ]; then
	echo TMPDIR not set, using /tmp.
	TMPDIR=/tmp
fi

if [ ! -d "${TMPDIR}" ]; then
	if [ -e "${TMPDIR}" ]; then
		echo TMPDIR \"${TMPDIR}\" is not a directory.
		echo Set TMPDIR to a place with enough space to hold dumps and log files.
		exit 1
	fi

	# Use a reasonable default.
	TMPDIR=/tmp
fi

GATHER_TEMP=/${TMPDIR}/gather_$$

rm -rf ${GATHER_TEMP}

if [ -r ${GATHER_TEMP} ]
then
    echo "Cannot clear ${GATHER_TEMP}"
    exit 1
fi

mkdir ${GATHER_TEMP}

masdirpath=/opt/quantum/mas_agent

if [ x${os} = xDarwin ]
then
    ALTPATHALLOWED=0
    cvdirpath=/Library/Logs/Xsan
    cvbinpath=/System/Library/Filesystems/acfs.fs/Contents/bin
    configpath=/Library/Preferences/Xsan
    OPTS=":f:ho:"
else
    ALTPATHALLOWED=1
    cvdirpath=/usr/cvfs
    cvbinpath=$cvdirpath/bin
    configpath=/usr/cvfs/config
    OPTS=":f:hkK:n:o:p:uU:x"
fi

if [ $os = "Linux" ]    ; then
    VENDOR="Linux"
    SYSLOG=/var/log/messages
    TGZ=tgz
    TAROPT=-czf
    COMPRESS=
elif [ $os = "SunOS" ]  ; then
    VENDOR="Solaris"
    SYSLOG=/var/adm/messages
    TGZ=tar
    TAROPT=-cf
    COMPRESS=compress
elif [ $os = "IRIX64" ] ; then
    VENDOR="Irix"
    SYSLOG=/var/adm/SYSLOG
    TGZ=tar
    TAROPT=-cf
    COMPRESS=compress
elif [ $os = "AIX" ]    ; then
    VENDOR="Aix"
    SYSLOG=/var/adm/syslog.out
    TGZ=tar
    TAROPT=-cf
    COMPRESS=compress
elif [ $os = "HP-UX" ]    ; then
    VENDOR="Hpux"
    SYSLOG=/var/adm/syslog/syslog.log
    TGZ=tar
    TAROPT=-cf
    COMPRESS=compress
elif [ $os = "Darwin" ]	; then
    VENDOR="Xsan"
    SYSLOG=/var/log/system.log
    TGZ=tgz
    TAROPT=-czf
    COMPRESS=
else
    echo "Insufficient system information (from uname) to do a gather."
    exit 2
fi

oshost=${VENDOR}_${host}

oshostfsname() {

    if [ $# -ne 1 ]; then
    	echo "usage: oshostfsname fsname" 1>&2
	exit 1
    fi

    echo ${oshost}_${1}
}

#
# Usage macro
#
# pse_snapshot calls cvgather in a loop, calling it once for each active
# file system. pse_snapshot calls cvgather with the -x option to prevent
# cvgather from collecting files that are already collected by pse_snapshot.
#
usage() {

    echo "${prog} [-f fsname [...]] [-o outputfile]"

    if [ ${ALTPATHALLOWED} -ne 0 ]
    then
	echo "[-n number of FSS logs]"
	echo "[-u] [-U [user core]] [-k] [-K [kernel core]]"
	echo "[-s] : Gather symbol information without core files"
	echo "[-p path to program directory]"
	echo "[-x] : Exclude files collected by pse_snapshot"
    fi
    exit 2
}

#
# Gather macro
#
gather_internal() {

    if [ x"${3}" = "x" ]; then
        targname=`basename "${2}"`
    else
        targname=${3}
    fi

    # if the source is a directory copy the entire
    # directory. Need to also handle symlink
    if [ -d "${2}/." ]
    then
	${ECHO} "  ${prog}: directory ${2}"
	cp -r "${2}/." "${GATHER_TEMP}/${1}.${targname}"
	return
    fi

    #
    # If the source exists, copy it into gather temp dir.
    #
    if [ -f "${2}" ]
    then
	${ECHO} "  ${prog}: file ${2}"
	cp "${2}" "${GATHER_TEMP}/${1}.${targname}"
        if [ x${os} = xDarwin ]; then
		mtime=`stat -f "%Sm" -t "%G%m%d%H%M.%S" "${2}"`
		touch -m -t ${mtime} \
		    "${GATHER_TEMP}/${1}.${targname}"
	fi
	return
    fi
}

gather()
{

    if [ $# -lt 1 -o $# -gt 2 ]
    then
        echo "usage: gather source_file [dest_file]" 1>&2
        exit 2
    fi

    gather_internal ${oshost} "${1}" "${2}"
}

gather_fs()
{

    if [ $# -lt 2 -o $# -gt 3 ]
    then
        echo "usage: gather_fs fsname source_file [dest_file]" 1>&2
        exit 2
    fi

    gather_internal `oshostfsname ${1}` "${2}" "${3}"
}

rolldown() {

    if [ $# -ne 1 ]
    then
	echo "usage: rolldown pathname" 1>&2
	exit 1
    fi

    if [ -f "$1-" ]
    then
	rolldown "$1-"

	if [ $? -ne 0 ]
	then
	    exit 1
	fi
    fi

    mv "$1" "$1-"

    if [ $? -ne 0 ]
    then
	echo "rolldown: Error moving $1 to $1- (Exiting)."
	exit 1
    fi
}

echo ""

getkcore=0
getucore=0
usercore="$cvdirpath/debug/core"
symbols=0
exclude_snapshot_files=0

MYCD=`pwd`

SNUPDATE_DIR="/opt/quantum/snupdate"
SNUPDATE="$SNUPDATE_DIR/bin/snupdate"

#
# Command line processing
#
while getopts "${OPTS}" opt; do
    case $opt in
        f ) fsnames="$fsnames $OPTARG"
	    ;;
	K ) kernelcore=$OPTARG
	    getkcore="2"
	    ;;
	k ) if [ "getkcore = 0" ] ; then
		getkcore="1"
	    fi 
	    ;;
	n ) cvlogs=$OPTARG
	    ;;
	o ) case $OPTARG in
	        /*) outputfile=$OPTARG ;;
		*)  outputfile=${MYCD}/$OPTARG ;;
	    esac
	    ;;
	p ) cvdirpath=$OPTARG
	    cvbinpath=$OPTARG/bin
	    configpath=$OPTARG/config
	    ;;
        s ) symbols="1"
	    ;;
	U ) usercore=$OPTARG
	    getucore="2"
	    ;;
	u ) if [ "getucore = 0" ] ; then
	    getucore="1"
	    fi 
	    ;;
	x ) exclude_snapshot_files="1"
	    ;;
	* ) usage ;;
    esac
done

#
# Re-initialize usercore in case cvdirpath changed
#
if  [ $getucore -eq 0 ] || [ $getucore -eq 1 ] ; then
    usercore="$cvdirpath/debug/core"
fi

#
# Some default behavior handling
#
if [ -z "$fsnames" ] ; then
    # Gather every file system if none were specified.
    for file in `find $configpath -name "*.cfg" -or -name "*.cfgx" -or -name "*.cfgp"` ; do
	if  [ -f $file ]; then 
	    fsname=`basename $file | cut -f 1 -d .`
	    fsnames="$fsnames $fsname"
	fi
    done

    if [ -z "$outputfile" ] ; then
        outputfile=${MYCD}/${oshost}_ALL_FILESYSTEMS
    fi
else
    for fsname in ${fsnames}; do
        check1=`ls $configpath | grep "$fsname"`;
        check2=`$cvbinpath/cvadmin -e "select" | grep "$fsname"`;
        check3=`cat /proc/mounts | grep "$fsname"`;
        check4=`cat /etc/fstab | grep "$fsname"`;
        if [ -n "$check1" -o -n "$check2" -o -n "$check3" -o -n "$check4" ]
        then
            continue
        else
            echo "Specified file system name '$fsname' does not exist."
            exit 1
        fi
    done
    if [ -z "$outputfile" ] ; then
    	outputfile=${MYCD}/${oshost}
    	for fsname in ${fsnames}; do
	    outputfile=${outputfile}_${fsname}
	done
    fi
fi

# add timestamp
outputfile=${outputfile}_`/bin/date +%Y%m%d%H%M%S%z`

if [ -r ${outputfile}.${TGZ} ]
then
    rolldown ${outputfile}.${TGZ}
fi

if [ -r ${outputfile}.${TGZ} ]
then
    echo "Cannot move ${outputfile}.${TGZ}"
    exit 1
fi

if [ ${COMPRESS}x != x ]
then

    if [ -r ${outputfile}.${TGZ}.Z ]
    then
        rolldown ${outputfile}.${TGZ}.Z
    fi

    if [ -r ${outputfile}.${TGZ}.Z ]
    then
        echo "Cannot move ${outputfile}.${TGZ}.Z"
        exit 1
    fi
fi

if [ -z "$cvlogs" ] ; then
    cvlogs="4"
fi

#
# <fsname outputfile cvdirpath cvlogs kernelcore>
#
# Get the system type
#
if [ ${os} = "IRIX64" ] 
then
  ${ECHO} "  ${prog}: uname -aR"
  uname -aR > ${GATHER_TEMP}/${oshost}.uname
else
  ${ECHO} "  ${prog}: uname -a"
  uname -a > ${GATHER_TEMP}/${oshost}.uname
fi

if [ ${os} = "Linux" ] 
then
   if [ -f /etc/redhat-release ] ; then
	cat /etc/redhat-release >> ${GATHER_TEMP}/${oshost}.uname
   fi
   if [ -f /etc/SuSE-release ] ; then
	cat /etc/SuSE-release >> ${GATHER_TEMP}/${oshost}.uname
   fi
fi

if [ x${os} = xDarwin ]
then
	${ECHO} "  ${prog}: ps auxwww"
	ps auxwww > ${GATHER_TEMP}/${oshost}.ps-auxwww

	${ECHO} "  ${prog}: system_profiler"
	system_profiler -xml > ${GATHER_TEMP}/${oshost}.system_profile.spx

	${ECHO} "  ${prog}: ioreg"
	ioreg -l -w 0 > ${GATHER_TEMP}/${oshost}.ioreg-dump.txt

	shasum -a 512 /Library/Preferences/Xsan/.auth_secret > ${GATHER_TEMP}/${oshost}.auth_secret.shasum_512

	# Gather Crash Reporter logs before running any Xsan utilities,
	# in case they crash again.
	for file in /Library/Logs/DiagnosticReports/cv*{,/*} \
	    /Library/Logs/DiagnosticReports/fsm*{,/*} \
	    /Library/Logs/DiagnosticReports/servermgr*{,/*} \
	    /Library/Logs/DiagnosticReports/Kernel_*{,/*} \
	    /Library/Logs/DiagnosticReports/com.apple.xsan*{,/*} \
	    /Library/Logs/DiagnosticReports/xsan*{,/*}; do
		gather "${file}"
	done

	gather /Library/Preferences/Xsan/uuid

	# OD Server logs
	gather /var/log/slapd.log
	gather /Library/Logs/slapconfig.log
	if [ -d /Library/Logs/PasswordService ]; then
		tar czf "${GATHER_TEMP}/${oshost}.PasswordServiceLogs.tgz" -C /Library/Logs/ PasswordService
	fi
	for file in /Library/Logs/DiagnosticReports/opendirectoryd*{,/*} \
	    /Library/Logs/DiagnosticReports/slapd*{,/*} \
	    /Library/Logs/DiagnosticReports/slapconfig*{,/*} \
	    /Library/Logs/DiagnosticReports/PasswordService*{,/*}; do
		gather "${file}"
	done

	# Server.app log bundle.
	if [ -x /Applications/Server.app/Contents/ServerRoot/usr/sbin/serverdiagnose ]; then
		${ECHO} "  ${prog}: serverdiagnose"
		/Applications/Server.app/Contents/ServerRoot/usr/sbin/serverdiagnose -nA ${GATHER_TEMP}/serverdiagnose.tgz
	fi

	# Gather up OD binding info
	tar czf "${GATHER_TEMP}/${oshost}.OpenDirectoryConfig.tgz" -C /Library/Preferences/ OpenDirectory

	# Gather up OD current state
	odutil show all > "${GATHER_TEMP}/${oshost}.ODUtil_show_all.txt"
	killall -INFO opendirectoryd
	for file in /var/log/opendirectoryd*; do
		gather "${file}"
	done

	if [ -r /var/run/ldapi ]; then
	    ${ECHO} "  ${prog}: xsanLdapConfig.plist"
	    summary_file=${GATHER_TEMP}/${oshost}.xsanLdapConfig.plist
	    xsanctl dumpLdapConfig > ${summary_file}
	fi

	# Gather up system/networking config info
	for file in /Library/Preferences/SystemConfiguration/*; do
		gather "${file}" "SystemConfiguration-`basename ${file}`"
	done
fi

#
# create the summary file
#
if [ $exclude_snapshot_files -eq 0 -a -f $cvbinpath/cvgather_sum ]; then
    ${ECHO} "  ${prog}: $cvbinpath/cvgather_sum"
    summary_file=${GATHER_TEMP}/${oshost}.cvsummary
    $cvbinpath/cvgather_sum > ${summary_file}
fi

${ECHO} "  ${prog}: $cvbinpath/cvversions"
$cvbinpath/cvversions > ${GATHER_TEMP}/${oshost}.cvversions

${ECHO} "  ${prog}: $cvbinpath/cvlabel -c"
$cvbinpath/cvlabel -c > ${GATHER_TEMP}/${oshost}.cvlabel-c

${ECHO} "  ${prog}: $cvbinpath/cvlabel -l"
$cvbinpath/cvlabel -l > ${GATHER_TEMP}/${oshost}.cvlabel-l

# cvfsid in cvgather_sum
#${ECHO} "  ${prog}: $cvbinpath/cvfsid"
#$cvbinpath/cvfsid > ${GATHER_TEMP}/${oshost}.cvfsid

if [ $os = "Darwin" ]; then
	for file in ${SYSLOG}*; do
		gather "${file}"
	done

	echo | /usr/bin/sysdiagnose -f ${GATHER_TEMP} -A ${oshost}.sysdiagnose -b
else
	gather ${SYSLOG}
fi

if [ $os = "Darwin" ]; then
	UserDiagnosticLogs="Library/Logs/DiagnosticReports"
	DSCL="dscl /Search"

	if [ x"${SUDO_USER}" != "x" ]; then
		adminUser=${SUDO_USER}
	else
		adminUser=${USER}
	fi

	Users="root ${adminUser}"

	for user in ${Users}; do
		output=`${DSCL} -read /Users/${user} NFSHomeDirectory 2>&1`
		dsKey=`echo ${output} | cut -d ' ' -f 1`

		if [ "${dsKey}" != "NFSHomeDirectory:" ]; then
			continue;
		fi

		homeDir=`echo ${output} | cut -d ' ' -f 2`

		lookdir="${homeDir}/${UserDiagnosticLogs}"

		if [ -d "${lookdir}" ]; then
		    for i in cvupdatefs cvfsck snfsdefrag; do
		        for file in "${lookdir}/${i}"*{,/*}; do
			    base=`basename "${file}"`
			    gather "${file}" "${user}-${base}"
			done
		    done
		fi
	done

	gather "$configpath/automount.plist"

	gather "$configpath/config.plist"

	${ECHO} "  ${prog}: ${oshost}.cvadmin_showrevisions"
	$cvbinpath/cvadmin -e showrevisions > ${GATHER_TEMP}/${oshost}.cvadmin_showrevisions
fi

if [ -f $cvbinpath/cvadmin ]
then
    ${ECHO} "  ${prog}: ${oshost}.cvadmin_select"
    $cvbinpath/cvadmin -e select > ${GATHER_TEMP}/${oshost}.cvadmin_select
fi

gather "$configpath/fsnameservers"

gather "$configpath/fsforeignservers"

if [ -f "$configpath/fsmlist" ]
then
    gather "$configpath/fsmlist"
fi

if [ -d "${cvdirpath}/qustats" ]; then
    echo "Packaging qustats in: ${oshost}.qustats.${TGZ}"
    tar ${TAROPT} ${GATHER_TEMP}/${oshost}.qustats.${TGZ} -C "${cvdirpath}" qustats > /dev/null 2>&1
fi

# Gather the /usr/cvfs/config directory.
gather "$configpath" cvfs_config

gather "$cvdirpath/debug/nssdbg.out"
x=0
while [ $x -le $cvlogs ] ; do 

    gather "$cvdirpath/debug/nssdbg.out_$x"

    x=`expr $x + 1`

done

gather "$cvdirpath/debug/cvfsd.errs"

gather "$cvdirpath/debug/cvfsd.out"

gather "$cvdirpath/debug/quantum_disk_license_report.xml"

gather "$cvdirpath/debug/fsmpm.out"

gather "$cvdirpath/debug/cvadmin.log"

gather "$cvdirpath/debug/qustat_cmd.log"

gather "$cvdirpath/debug/qustat_lib.log"

gather "$cvdirpath/debug/snadmin.log"

gather "$cvdirpath/debug/snstatd.log"

gather "$cvdirpath/debug/sn_web_gui.log"

gather "$cvdirpath/debug/snlicense.log"

if [ -x "$SNUPDATE" ] ; then
    gather "$SNUPDATE_DIR/log/snupdate.log"
    gather "$SNUPDATE_DIR/etc/snupdate.conf"
    gather "$SNUPDATE_DIR/etc/pkg.list" "snupdate.pkg.list"

    ${ECHO} "  ${prog}: $SNUPDATE show info"
    $SNUPDATE show info > ${GATHER_TEMP}/${oshost}.snupdate.show_info

    ${ECHO} "  ${prog}: $SNUPDATE show versions"
    $SNUPDATE show versions > ${GATHER_TEMP}/${oshost}.snupdate.show_versions
fi

if [ $os = "Linux" ] ; then
    gather "$cvdirpath/debug/smithlog"

    gather "$cvdirpath/debug/snpolicy.out"

    gather "$cvdirpath/debug/blockpool_start.log"

    gather "$cvdirpath/debug/blockpool_master.log"

    gather "$cvdirpath/debug/snpolapi.log"

    gather "$cvdirpath/debug/ha_mgr.out"

    gather /sys/devices/system/cpu/cpuidle/current_driver

    gather /sys/module/intel_idle/parameters/max_cstate

    gather /proc/acpi/processor/CPU0/power

    gather /proc/acpi/processor/CPU0/info

    gather /etc/sysconfig/cpuspeed

    for i in "$cvdirpath"/debug/snactivated.*.log
    do
        gather "$i"
    done

    # Gather the label_history data
    if [ $exclude_snapshot_files -eq 0 -a -d $cvdirpath/label_history ]
    then
	for i in "$cvdirpath"/label_history/*.log
	do
	    gather "$i"
	done
    fi

    # gather snpolicy dump
    if [ $exclude_snapshot_files -eq 0 -a -f $cvdirpath/bin/snpolicy_gather ]
    then
         ${ECHO} "  ${prog}: $cvdirpath/bin/snpolicy_gather"
         "$cvdirpath/bin/snpolicy_gather" &> "${GATHER_TEMP}/${oshost}.snpolicy_gather"
    fi
 
    # gather sar binary and text files if sysstat has been installed
    if [ $exclude_snapshot_files -eq 0 -a -d /var/log/sa ]; then
	gather /var/log/sa
    fi

    for i in /var/log/boot.*
    do
        gather $i
    done

    ${ECHO} "  ${prog}: $cvbinpath/snprobe"
    $cvbinpath/snprobe > ${GATHER_TEMP}/${oshost}.snprobe
fi

#
# File-system specific files.
#
for fsname in ${fsnames}; do
	gather_fs "${fsname}" "$configpath/${fsname}.cfgp"
	gather_fs "${fsname}" "$configpath/${fsname}.cfgx"
	gather_fs "${fsname}" "$configpath/${fsname}.cfg"
	gather_fs "${fsname}" "$configpath/${fsname}.cfg-old"
	gather_fs "${fsname}" "$configpath/${fsname}-auxdata.plist"	# Xsan

	gather_fs "${fsname}" "$cvdirpath/data/${fsname}/log/cvlog"

	x=0
	while [ $x -le $cvlogs ]; do 
		gather_fs "${fsname}" "$cvdirpath/data/${fsname}/log/cvlog_${x}"
		x=`expr ${x} + 1`
	done

	if [ -d "$cvdirpath/data/${fsname}/trace" ]; then
		for x in `ls -tr "$cvdirpath/data/${fsname}/trace/"`; do
			gather_fs "${fsname}" "$cvdirpath/data/${fsname}/trace/${x}"
		done
	fi

	if [ -f $cvbinpath/cvadmin ]; then
	    $cvbinpath/cvadmin -F "${fsname}" -e stat > "${GATHER_TEMP}/${oshost}_${fsname}.stat"
	    $cvbinpath/cvadmin -F "${fsname}" -e 'show long' > "${GATHER_TEMP}/${oshost}_${fsname}.showLong"
	    $cvbinpath/cvadmin -F "${fsname}" -e 'who long' > "${GATHER_TEMP}/${oshost}_${fsname}.whoLong"
	fi

	if [ -f $cvdirpath/bin/snquota ]
	then
	    ${ECHO} "  ${prog}: snquota  $fsname"
	    $cvdirpath/bin/snquota -F $fsname -X &> /dev/null
	elif [ -f $cvbinpath/cvadmin ]
	then
	    ${ECHO} "  ${prog}: repquota $fsname"
	    $cvbinpath/cvadmin -F $fsname -e repquota &> /dev/null
	fi

	for i in $cvdirpath/data/$fsname/quota_*
	do
	    gather_fs "${fsname}" $i
	done

done

gather "$cvdirpath/ras/raslog"

gather "$cvdirpath/ras/OLDraslog"

for i in /etc/fstab /etc/vfstab /etc/exports /etc/dfs/dfstab /etc/hosts /etc/*release /proc/cpuinfo /proc/meminfo /proc/slabinfo /proc/modules
do
    if [ -f $i ]; then
	gather $i
    fi
done

for i in "hostname" "ypcat hosts" "ifconfig -a" "netstat -rn" "netstat -s" "vmstat 2 5"
do
    nm=`echo $i | sed 's/ /_/g'`
    $ECHO running $i ...
    $i > ${GATHER_TEMP}/${oshost}.$nm 2>&1
done

/bin/rm -f ${GATHER_TEMP}/${oshost}.corelist
for i in ${usercore}*
do
    if [ ! -f $i ]; then
	continue
    fi
    ls -l $i >> ${GATHER_TEMP}/${oshost}.corelist 2>&1
    file $i >> ${GATHER_TEMP}/${oshost}.corelist 2>&1
done
if [ ! -f ${GATHER_TEMP}/${oshost}.corelist ]; then
    echo "No core files found in ${usercore}." > ${GATHER_TEMP}/${oshost}.corelist
fi

#
# Kernel core
#
if [ $getkcore -eq 2 ] ; then

    gather "$kernelcore" 
fi 
	

if [ $getkcore -eq 1 ] ; then 

    host=`hostname`

    if [ $os = "Linux" ]    ; then
    	echo "    No system cores on Linux systems."
    fi 

    if [ $os = "SunOS" ]  ; then 
    	x="0"

        DumpPath=`/usr/sbin/dumpadm | awk '/Savecore directory:/ {print $3}'`

    	for file in `ls "${DumpPath}/" |grep vmcore.` ; do

    	    if [ "$file > $x" ]; then
	    	x=$file
	    fi
    	done

    	if [ "$x != 0" ] ; then

    	    gather "${DumpPath}/$x"

    	else
    	    echo "No ${DumpPath}/vmcore available."
    	fi

    	x="0"

    	for file in `ls "${DumpPath}/" |grep unix.` ; do

            if [ "$file > $x" ]; then
	    	x=$file
	    fi

    	done

    	if [ "$x != 0" ] ; then

    	    gather "${DumpPath}/$x"

    	else
	    echo "No ${DumpPath}/unix file available."
	    
    	fi 
    fi
    
    if [ $os = "IRIX64" ] ; then

    	x="0"

    	for file in `ls /var/adm/crash/ |grep vmcore. |grep .index` ; do

	    num=`echo $file | sed -e "s/vmcore.\([0-9]*\).index/\1/"`

            if [ "$num > $x" ]; then
	    	x=$num
	    fi
    	done

    	if [ "$x != 0" ] ; then

	    for file in `ls /var/adm/crash/*.${x}*` ; do

    	        gather "$file"

	    done

    	else

	    echo "No /var/adm/crash kernel core files available."
    	fi

    fi
    
    if [ $os = "HP-UX" ] ; then

	last_crash=`/bin/ls -trd /var/adm/crash/crash.* | tail -1`
	if [ -d $last_crash ]
	then
	    goback=`pwd`
	    cd $last_crash
	    mkdir /var/tmp/gather.$$
	    tar -cf /var/tmp/gather.$$/last_dump .
	    compress /var/tmp/gather.$$/last_dump
	    gather /var/tmp/gather.$$/last_dump.Z
	    rm -rf /var/tmp/gather.$$ &
	    cd $goback
    	else

	    echo "No /var/adm/crash available."
    	fi
    fi
    
    if [ $os = "AIX" ]    ; then

    	x="0"

    	for file in `ls /var/adm/ras/ |grep vmcore\.` ; do

	    num=`echo $file | sed -e "s/vmcore\.\([0-9]*\).*/\1/"`

            if [ "$num > $x" ]; then
	    	x=$num
	    fi
    	done

    	if [ "$x != 0" ] ; then

    	    gather /var/adm/ras/vmcore.$x*

    	else

    	    echo "no /var/adm/ras/vmcore file available"
    	fi
    fi
fi


#
# symbols will gather all the symbol information, but not the actual corefiles
# This is to enable gathering of reasonable sized files without an 8GB corefile.
#
if [ $symbols -eq 1 ] ; then 

    host=`hostname`

    if [ $os = "Linux" ]    ; then
	suffix=`uname -r`
	gather /boot/System.map-${suffix}
	gather /usr/lib/debug/lib/modules/${suffix}/vmlinux
	gather /usr/bin/crash
    fi 

    if [ $os = "SunOS" ]  ; then 
	echo "symbol option not supported for SunOS"
    fi
    
    if [ $os = "IRIX64" ] ; then

    	x="0"

    	for file in `ls /var/adm/crash/ |grep vmcore. |grep .index` ; do

    	x="0"

    	for file in `ls /var/adm/ras/ |grep vmcore\.` ; do

	    num=`echo $file | sed -e "s/vmcore\.\([0-9]*\).*/\1/"`

            if [ "$num > $x" ]; then
	    	x=$num
	    fi
    	done

    	if [ "$x != 0" ] ; then

    	    gather /var/adm/ras/vmcore.$x*

    	else

    	    echo "no /var/adm/ras/vmcore file available"
    	fi

	    num=`echo $file | sed -e "s/vmcore.\([0-9]*\).index/\1/"`

            if [ "$num > $x" ]; then
	    	x=$num
	    fi
    	done

    	if [ "$x != 0" ] ; then

	    for file in `ls /var/adm/crash/*.${x}` ; do

    	        gather "$file"

	    done
	    gather /var/adm/crash/*.${x}.index

    	else

	    echo "No /var/adm/crash kernel core files available."
    	fi

    fi
    
    if [ $os = "HP-UX" ] ; then
	echo "symbol option not supported for HP-UX"

    fi
    
    if [ $os = "AIX" ]    ; then
	echo "symbol option not supported for AIX"
    fi
fi

#
# User core files
#
if [ x${os} = xDarwin ] ; then

    # Always try to gather fsm and fsmpm core files on Mac OS X.
    # Remove the file after gathering it, else they pile up.

    for file in /cores/core.fsm.* /cores/core.fsmpm.* /cores/core.xsan*; do
    	gather "$file"
	rm -f "$file"
    done

elif [ $getucore -eq 1 ] || [ $getucore -eq 2 ] ; then

    # grab specified user core and most recently touched core.PID file
    
    if [ -f "${usercore}" ]; then
	gather "$usercore"
    fi
    if [ $getucore -eq 1 ]; then
        for i in `/bin/ls -1 -t ${usercore}.* 2>/dev/null | head -1`
        do
            gather "$i"
        done
    fi

fi

#
# Tar it up
#
${ECHO}
${ECHO} "Creating tar ball."

tar ${TAROPT} "$outputfile.${TGZ}" -C "${GATHER_TEMP}" .

SUCCESS=$?

#
# Get rid of the temp files.
#
rm -rf "${GATHER_TEMP}"

if [ ${COMPRESS}x != x ]
then
    ${COMPRESS} "$outputfile.${TGZ}"
    CFILE=$outputfile.${TGZ}.Z
else
    CFILE=$outputfile.${TGZ}
fi

${ECHO}
if [ "$SUCCESS" -ne 0 ]; then
    ${ECHO} "Unable to create tar ball."
else
    ${ECHO} "Tar ball created at ${CFILE}"
fi
${ECHO}

${ECHO} "${prog}: Complete."
